* About UOKO.SSO

  see here for more info => [[http://lust4life.github.io/tech/authentication-authoriztion.html#sec-5]]

** how can i use it

   1. deploy the sso server site: assign a domain in iis (e.g: sso.uoko.com)
   2. client site (relying party) reference sso.client.mvc package (through [[http://lust4life.github.io/work/nuget-package-uoko.html][uoko nuget package server]]) if your project is mvc project
   3. do some configuration

*** about server configuration

    in sso server web.config , add setting:

    #+BEGIN_SRC xml
      <add key="sso.cookieDomain" value="uoko.com" />
      <add key="permission.api.url" value="http://api.permission.uoko.cn" />
    #+END_SRC

    the value need to be the domain of your sso server site url. all done.

*** about client configuration

    in global.asax.cs file:

    #+BEGIN_SRC csharp
      protected void Application_Start()
      {

          // config relying party client
          // self-cookie could be optional if your site domain is under sso server domain
          RelyingPartyClient.Config(new ClientConfig("test-demo-site",
                                                     "http://sso.uoko.com",
                                                     "uoko.com",
                                                     "http://172.16.1.17:8038",
                                                     "self-cookie"));

          AreaRegistration.RegisterAllAreas();
          FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
          RouteConfig.RegisterRoutes(RouteTable.Routes);
          BundleConfig.RegisterBundles(BundleTable.Bundles);
      }
    #+END_SRC

    *ClientConfig params description*

    "test-demo-site" is appkey, can be anything,but should be allocate from sso server.

    "http://sso.uoko.com" is ssoServerUrl, is the sso server site url.

    "uoko.com" is ssoCookieDomain ,is the sso server url domain,need to be the same as the setting(sso.cookieDomain) in sso server web.config.

    "http://172.16.1.17:8038" is the permission api url. your permision data needs from here.

    "self-coolie" is yourOwnCookieName, can be optional if your site domain is under(same as) sso site domain.

    add auth filter in global or add put in controller/action you want to auth

    #+BEGIN_SRC csharp
      public class FilterConfig
      {
          public static void RegisterGlobalFilters(GlobalFilterCollection filters)
          {
              // UnAuthroized is the view name of forbidden result
              // SSOAuthenticationAttribute for authrication (login)
              filters.Add(new SSOAuthenticationAttribute("UnAuthroized"));

              // SSOAuthorizeAttribute for access control
              filters.Add(new SSOAuthorizeAttribute());

              filters.Add(new HandleErrorAttribute());
          }
      }
    #+END_SRC

    in your logoff action

    #+BEGIN_SRC csharp
         /// <summary>
         /// 如果是第三方则,调用 relying party client 进行自身的 LogOff
         /// 否者调用 sso logoff
         /// </summary>
         /// <returns></returns>
         public ActionResult LogOff()
         {

             // if your client site is from other domain, add this to remove your local cookie
             // RelyingPartyClient.RemoveLocalCookie();


             // 可以指定相应的 returnUrl 进行跳转
             var returnUrl = "http://one.uoko.com/home/anonymous";

             // 如果需要使用 returnUrl 需要保证这是一个绝对 url,不是相对路径
             var ssoLogOffUrl = RelyingPartyClient.GetLogOutUrl(returnUrl);
             return Redirect(ssoLogOffUrl);
         }
    #+END_SRC


** where can i get the identity info

   use Current class to get the UserIdentity

   #+BEGIN_SRC csharp
     [Authorize]
     public class HomeController : Controller
     {

         public ActionResult Index()
         {
             // here to get basic identity info
             var userAlias = SSOInfo.UserIdentity.UserAlias;

             return View();
         }

     }
   #+END_SRC
